"use client";

import { useEffect, useState } from "react";
import type { UIMessage } from "ai";
import { CodeBlock } from "@/components/codeblock";
import { Markdown } from "@/components/markdown";

interface ArtifactsProps {
  messages: UIMessage[];
}

interface Artifact {
  id: string;
  type: string;
  title: string;
  content: string;
  language?: string;
  messageId: string;
}

/**
 * Artifacts component - displays code, documents, and other artifacts
 * generated by the AI in the right panel
 */
export function Artifacts({ messages }: ArtifactsProps) {
  const [artifacts, setArtifacts] = useState<Artifact[]>([]);
  const [selectedArtifact, setSelectedArtifact] = useState<Artifact | null>(null);

  useEffect(() => {
    // Extract artifacts from messages
    const extractedArtifacts: Artifact[] = [];

    messages.forEach((message) => {
      if (message.role === "assistant" && message.parts) {
        message.parts.forEach((part, index) => {
          // Look for text parts that might contain artifacts
          if (part.type === "text" && typeof part.text === "string") {
            const text = part.text;

            // Extract code blocks with language
            const codeBlockRegex = /```(\w+)?\n([\s\S]*?)```/g;
            let match;
            let codeBlockIndex = 0;

            while ((match = codeBlockRegex.exec(text)) !== null) {
              const language = match[1] || "text";
              const code = match[2];

              if (code.trim().length > 20) {
                // Only show substantial code blocks
                extractedArtifacts.push({
                  id: `${message.id}-code-${codeBlockIndex}`,
                  type: "code",
                  title: `Code (${language})`,
                  content: code,
                  language,
                  messageId: message.id,
                });
                codeBlockIndex++;
              }
            }

            // Extract potential documents (markdown without code blocks)
            const withoutCodeBlocks = text.replace(/```[\s\S]*?```/g, "");
            if (
              withoutCodeBlocks.trim().length > 200 &&
              (withoutCodeBlocks.includes("#") || withoutCodeBlocks.includes("##"))
            ) {
              extractedArtifacts.push({
                id: `${message.id}-doc-${index}`,
                type: "document",
                title: "Document",
                content: withoutCodeBlocks,
                messageId: message.id,
              });
            }
          }
        });
      }
    });

    setArtifacts(extractedArtifacts);

    // Auto-select the most recent artifact only when artifacts change
    // FIXED: Removed selectedArtifact from dependency array to prevent infinite loop
    if (extractedArtifacts.length > 0) {
      setSelectedArtifact(extractedArtifacts[extractedArtifacts.length - 1]);
    }
  }, [messages]); // FIXED: Only depend on messages, not selectedArtifact

  if (artifacts.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center h-full text-center p-6">
        <div className="text-gray-500 text-sm mb-2">No artifacts yet</div>
        <div className="text-gray-600 text-xs max-w-xs">
          Artifacts like code snippets and documents will appear here when generated by the AI
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col h-full">
      {/* Artifact tabs */}
      {artifacts.length > 1 && (
        <div className="flex gap-1 p-2 border-b border-green-800/20 overflow-x-auto">
          {artifacts.map((artifact) => (
            <button
              key={artifact.id}
              onClick={() => setSelectedArtifact(artifact)}
              className={`px-3 py-1.5 text-xs rounded transition-colors whitespace-nowrap ${
                selectedArtifact?.id === artifact.id
                  ? "bg-green-900/30 text-green-400 border border-green-800/30"
                  : "text-gray-400 hover:text-gray-300 hover:bg-black/20"
              }`}
            >
              {artifact.title}
            </button>
          ))}
        </div>
      )}

      {/* Artifact content */}
      {selectedArtifact && (
        <div className="flex-1 overflow-y-auto p-4">
          <div className="mb-3 flex items-center justify-between">
            <h3 className="text-sm font-medium text-green-400">
              {selectedArtifact.title}
            </h3>
            <span className="text-xs text-gray-500 uppercase">
              {selectedArtifact.type}
            </span>
          </div>

          {selectedArtifact.type === "code" ? (
            <div className="rounded-lg overflow-hidden border border-green-800/20">
              <CodeBlock
                language={selectedArtifact.language || "text"}
                value={selectedArtifact.content}
              />
            </div>
          ) : selectedArtifact.type === "document" ? (
            <div className="prose prose-invert prose-sm max-w-none">
              <Markdown content={selectedArtifact.content} />
            </div>
          ) : (
            <pre className="text-xs text-gray-300 whitespace-pre-wrap break-words bg-black/30 p-4 rounded-lg border border-green-800/20">
              {selectedArtifact.content}
            </pre>
          )}
        </div>
      )}
    </div>
  );
}

