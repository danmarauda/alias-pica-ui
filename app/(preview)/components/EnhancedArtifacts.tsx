"use client";

import { useArtifacts } from "@ai-sdk-tools/artifacts/client";
import { CodeBlock } from "@/components/codeblock";
import { Markdown } from "@/components/markdown";

/**
 * Enhanced Artifacts component using Midday AI SDK Tools
 * Automatically listens to all artifact types and renders them
 */
export function EnhancedArtifacts() {
  const { latest, current, byType } = useArtifacts({
    onData: (artifactType, data) => {
      console.log(`[Artifact] ${artifactType} updated:`, data.status);
    },
  });

  // If no artifacts, show empty state
  if (!current && Object.keys(latest).length === 0) {
    return (
      <div className="flex flex-col items-center justify-center h-full text-center p-6">
        <div className="text-gray-500 text-sm mb-2">No artifacts yet</div>
        <div className="text-gray-600 text-xs max-w-xs">
          Artifacts like code snippets, documents, and data visualizations will appear here when generated by the AI
        </div>
      </div>
    );
  }

  // Render the current artifact or latest of each type
  const artifactsToRender = current ? [current] : Object.values(latest);

  return (
    <div className="flex flex-col h-full">
      {/* Artifact tabs (if multiple types) */}
      {Object.keys(latest).length > 1 && (
        <div className="flex gap-1 p-2 border-b border-green-800/20 overflow-x-auto">
          {Object.entries(latest).map(([type, artifact]) => (
            <button
              key={type}
              className={`px-3 py-1.5 text-xs rounded transition-colors whitespace-nowrap ${
                current?.type === type
                  ? "bg-green-900/30 text-green-400 border border-green-800/30"
                  : "text-gray-400 hover:text-gray-300 hover:bg-black/20"
              }`}
            >
              {type}
              {artifact.status === "streaming" && (
                <span className="ml-2 inline-block w-2 h-2 bg-green-400 rounded-full animate-pulse" />
              )}
            </button>
          ))}
        </div>
      )}

      {/* Artifact content */}
      <div className="flex-1 overflow-y-auto p-4">
        {artifactsToRender.map((artifact) => (
          <div key={artifact.id} className="mb-6 last:mb-0">
            {/* Artifact header */}
            <div className="mb-3 flex items-center justify-between">
              <div>
                <h3 className="text-sm font-medium text-green-400">
                  {artifact.type}
                </h3>
                {artifact.progress !== undefined && artifact.progress < 1 && (
                  <div className="mt-1 w-full bg-black/30 rounded-full h-1">
                    <div
                      className="bg-green-400 h-1 rounded-full transition-all duration-300"
                      style={{ width: `${artifact.progress * 100}%` }}
                    />
                  </div>
                )}
              </div>
              <div className="flex items-center gap-2">
                <span className={`text-xs uppercase px-2 py-0.5 rounded ${
                  artifact.status === "complete"
                    ? "bg-green-900/30 text-green-400"
                    : artifact.status === "streaming"
                    ? "bg-blue-900/30 text-blue-400"
                    : artifact.status === "error"
                    ? "bg-red-900/30 text-red-400"
                    : "bg-gray-900/30 text-gray-400"
                }`}>
                  {artifact.status}
                </span>
              </div>
            </div>

            {/* Artifact payload rendering */}
            {artifact.error ? (
              <div className="mb-3 p-3 bg-red-900/20 border border-red-800/30 rounded text-xs text-red-400">
                Error: {String(artifact.error)}
              </div>
            ) : null}

            {artifact.payload ? (
              <ArtifactPayloadRenderer
                type={artifact.type}
                payload={artifact.payload as Record<string, unknown>}
              />
            ) : null}
          </div>
        ))}
      </div>
    </div>
  );
}

/**
 * Renders artifact payload based on type
 */
function ArtifactPayloadRenderer({ type, payload }: { type: string; payload: Record<string, unknown> | string }) {
  // Handle different artifact types
  switch (type) {
    case "code":
    case "code-snippet":
      if (typeof payload === "string") {
        return (
          <div className="rounded-lg overflow-hidden border border-green-800/20">
            <CodeBlock language="text" value={payload} />
          </div>
        );
      }
      return (
        <div className="rounded-lg overflow-hidden border border-green-800/20">
          <CodeBlock
            language={(payload.language as string) || "text"}
            value={(payload.code as string) || (payload.content as string) || JSON.stringify(payload, null, 2)}
          />
        </div>
      );

    case "document":
    case "markdown":
      if (typeof payload === "string") {
        return (
          <div className="prose prose-invert prose-sm max-w-none">
            <Markdown content={payload} />
          </div>
        );
      }
      return (
        <div className="prose prose-invert prose-sm max-w-none">
          <Markdown content={(payload.content as string) || (payload.markdown as string) || JSON.stringify(payload, null, 2)} />
        </div>
      );

    case "chart":
    case "data":
    case "visualization":
      return (
        <div className="bg-black/30 p-4 rounded-lg border border-green-800/20">
          <pre className="text-xs text-gray-300 whitespace-pre-wrap break-words">
            {typeof payload === "string" ? payload : JSON.stringify(payload, null, 2)}
          </pre>
        </div>
      );

    default:
      // Generic rendering for unknown types
      if (typeof payload === "string") {
        return (
          <div className="prose prose-invert prose-sm max-w-none">
            <Markdown content={payload} />
          </div>
        );
      }

      if (typeof payload === "object") {
        return (
          <div className="bg-black/30 p-4 rounded-lg border border-green-800/20">
            <pre className="text-xs text-gray-300 whitespace-pre-wrap break-words">
              {JSON.stringify(payload, null, 2)}
            </pre>
          </div>
        );
      }

      return (
        <div className="text-xs text-gray-400">
          {String(payload)}
        </div>
      );
  }
}

